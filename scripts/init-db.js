const { MongoClient } = require('mongodb');
const bcrypt = require('bcryptjs');

// Configuration - √† modifier selon votre environnement
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/iujp2-site';
const ADMIN_EMAIL = process.env.ADMIN_EMAIL || 'admin@iujp2.com';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';
const ADMIN_NAME = process.env.ADMIN_NAME || 'Administrateur Principal';

async function initDatabase() {
  const client = new MongoClient(MONGODB_URI);

  try {
    await client.connect();
    console.log('‚úÖ Connect√© √† MongoDB');

    const db = client.db();

    // Cr√©er les collections si elles n'existent pas
    const collections = ['users', 'articles', 'contacts'];
    
    for (const collectionName of collections) {
      try {
        await db.createCollection(collectionName);
        console.log(`‚úÖ Collection '${collectionName}' cr√©√©e`);
      } catch (error) {
        if (error.code === 48) { // Collection already exists
          console.log(`‚ÑπÔ∏è  Collection '${collectionName}' existe d√©j√†`);
        } else {
          console.error(`‚ùå Erreur cr√©ation collection '${collectionName}':`, error);
        }
      }
    }

    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await db.collection('users').findOne({ role: 'admin' });
    
    if (existingAdmin) {
      console.log('‚ÑπÔ∏è  Un administrateur existe d√©j√†');
      console.log(`   Email: ${existingAdmin.email}`);
      console.log(`   Nom: ${existingAdmin.name}`);
    } else {
      // Cr√©er l'utilisateur admin par d√©faut
      const hashedPassword = await bcrypt.hash(ADMIN_PASSWORD, 12);
      
      const adminUser = {
        email: ADMIN_EMAIL,
        name: ADMIN_NAME,
        password: hashedPassword,
        role: 'admin',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      await db.collection('users').insertOne(adminUser);
      
      console.log('‚úÖ Utilisateur administrateur cr√©√©');
      console.log(`   Email: ${ADMIN_EMAIL}`);
      console.log(`   Mot de passe: ${ADMIN_PASSWORD}`);
      console.log('‚ö†Ô∏è  IMPORTANT: Changez ce mot de passe apr√®s la premi√®re connexion !');
    }

    // Cr√©er des index pour optimiser les performances
    await db.collection('users').createIndex({ email: 1 }, { unique: true });
    await db.collection('articles').createIndex({ published: 1 });
    await db.collection('articles').createIndex({ category: 1 });
    await db.collection('articles').createIndex({ createdAt: -1 });
    await db.collection('contacts').createIndex({ status: 1 });
    await db.collection('contacts').createIndex({ createdAt: -1 });
    
    console.log('‚úÖ Index cr√©√©s');

    console.log('\nüéâ Base de donn√©es initialis√©e avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Configurez vos variables d\'environnement dans .env.local');
    console.log('2. Installez les d√©pendances: npm install');
    console.log('3. Lancez le serveur: npm run dev');
    console.log('4. Connectez-vous √† /admin/login avec les identifiants ci-dessus');

  } catch (error) {
    console.error('‚ùå Erreur initialisation base de donn√©es:', error);
    process.exit(1);
  } finally {
    await client.close();
  }
}

// Ex√©cuter le script
initDatabase(); 